{"version":3,"sources":["components/Habit.jsx","components/habitAddForm.jsx","components/Habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIcrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","e","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleIncrement","handleAdd","habits","map","id","onReset","Component","Navbar","totalCount","App","state","item","setState","filter","Date","now","handleReset","Fragment","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63a4df44.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass Habit extends PureComponent {\r\n  // 이 컴포넌트는 부모로 부터 받아온 정보를 사용하므로 따로 state가 필요하지 않다.\r\n  // state object 안에 있는 count를 증가 한 뒤 state를 업데이트 해야 한다.\r\n\r\n  /* Lifecycle 예시 */\r\n  componentDidMount() {\r\n    console.log(`habit : ${this.props.habit.name} mounted`);\r\n  }\r\n  componentWillUnmount() {\r\n    console.log(`habit : ${this.props.habit.name} wiil unmount`);\r\n  }\r\n  handleIcrement = () => {\r\n    this.props.onIncrement(this.props.habit);\r\n  };\r\n  handleDecrement = () => {\r\n    this.props.onDecrement(this.props.habit);\r\n  };\r\n  handleDelete = () => {\r\n    this.props.onDelete(this.props.habit);\r\n  };\r\n\r\n  render() {\r\n    const { name, count } = this.props.habit;\r\n    return (\r\n      <li className='habit'>\r\n        <span className='habit-name'>{name}</span>\r\n        <span className='habit-count'>{count}</span>\r\n        <button\r\n          className='habit-button habit-increase'\r\n          onClick={this.handleIcrement}\r\n        >\r\n          <i className='fas fa-plus-square'></i>\r\n        </button>\r\n        <button\r\n          className='habit-button habit-decrease'\r\n          onClick={this.handleDecrement}\r\n        >\r\n          <i className='fas fa-minus-square'></i>\r\n        </button>\r\n        <button\r\n          className='habit-button habit-delete'\r\n          onClick={this.handleDelete}\r\n        >\r\n          <i className='fas fa-trash'></i>\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habit;\r\n","import React, { memo, PureComponent } from 'react';\r\n\r\nconst HabitAddForm = memo((props) => {\r\n  const formRef = React.createRef(); // React.createRef()를 사용하게되면\r\n  // 함수가 반복해서 실행될 때마다 변수가 생성되는 비효율적인 일이 발생한다.\r\n  // 따라서 이를 해결해주기 위해 react Hook 을 사용하는 코드도 고려해야한다.\r\n  const inputRef = React.createRef();\r\n  const onSubmit = (e) => {\r\n    e.preventDefault(); // 브라우저 기본 기능을 취소 ( 페이지 리로딩 방지)\r\n    const name = inputRef.current.value;\r\n    name && props.onAdd(name);\r\n    //this.inputRef.current.value = ''; // 추가한뒤 입력한 값 초기화\r\n    formRef.current.reset(); // 초기화 동일하다 (정석)\r\n  };\r\n  return (\r\n    <form ref={formRef} className='add-form' onSubmit={onSubmit}>\r\n      <input\r\n        ref={inputRef} // input이라는 요소가 inputRef와 연결이 되어서 이 요소에 접근해서 해당하는 데이터를 읽어올 수 있다.\r\n        type='text'\r\n        className='add-input'\r\n        placeholder='Habit'\r\n      />\r\n      <button className='add-button'>Add</button>\r\n    </form>\r\n  );\r\n});\r\n\r\n// class HabitAddForm extends PureComponent {\r\n//   formRef = React.createRef();\r\n//   inputRef = React.createRef();\r\n//   // DOM 요소에 접근해서 그 요소에 value 나 클릭 이벤트나 이런 걸 등록했던 것 처럼\r\n//   // 리액트는 바로 DOM 요소에 접근하지 않고 필요할 때 리액트에서 제공하는 createRef를 이용해서 멤버변수를 정의 한다음에\r\n//   // 그것을 원하는 해당하는 리액트 컴포넌트에 ref로 연결하면 된다.\r\n\r\n//   onSubmit = (e) => {\r\n//     e.preventDefault(); // 브라우저 기본 기능을 취소 ( 페이지 리로딩 방지)\r\n//     const name = this.inputRef.current.value;\r\n//     name && this.props.onAdd(name);\r\n//     //this.inputRef.current.value = ''; // 추가한뒤 입력한 값 초기화\r\n//     this.formRef.current.reset(); // 초기화 동일하다 (정석)\r\n//   };\r\n//   render() {\r\n//     return (\r\n//       <form ref={this.formRef} className='add-form' onSubmit={this.onSubmit}>\r\n//         <input\r\n//           ref={this.inputRef} // input이라는 요소가 inputRef와 연결이 되어서 이 요소에 접근해서 해당하는 데이터를 읽어올 수 있다.\r\n//           type='text'\r\n//           className='add-input'\r\n//           placeholder='Habit'\r\n//         />\r\n//         <button className='add-button'>Add</button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default HabitAddForm;\r\n","import React, { Component } from 'react';\r\nimport Habit from './Habit';\r\nimport HabitAddForm from './habitAddForm';\r\n\r\nclass Habits extends Component {\r\n  // Habits는 PureComponent 를 사용하지 않아도 괜찮을까?\r\n  // Habits라는 habit의 리스트를 받아오는데 habit이 업데이트 되면 새로운 객체로 만들어지고 이는\r\n  // Habits 또한 render를 유도하기 때문에 굳이 PureComponent로 만들 필요 없다.\r\n  handleIncrement = (habit) => {\r\n    this.props.onIncrement(habit);\r\n  };\r\n  handleDecrement = (habit) => {\r\n    this.props.onDecrement(habit);\r\n  };\r\n  handleDelete = (habit) => {\r\n    this.props.onDelete(habit);\r\n  };\r\n  handleAdd = (name) => {\r\n    this.props.onAdd(name);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <HabitAddForm onAdd={this.handleAdd} />\r\n        <ul>\r\n          {this.props.habits.map((habit) => (\r\n            <Habit\r\n              key={habit.id}\r\n              habit={habit}\r\n              onIncrement={this.props.onIncrement}\r\n              onDecrement={this.props.onDecrement}\r\n              onDelete={this.props.onDelete}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <button className='habits-reset' onClick={this.props.onReset}>\r\n          Reset All\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Habits;\r\n/* my code \r\n  handleIncrement = (habit) => {\r\n    // const id = habit.id;\r\n    // const { habits } = this.state;\r\n    // this.setState({\r\n    //   habits: habits.map((m_habit) =>\r\n    //     id === m_habit.id ? { ...m_habit, count: m_habit.count + 1 } : m_habit\r\n    //   ),\r\n    // });\r\n\r\n    const habits = [...this.props.habits];\r\n    const index = habits.indexOf(habit);\r\n    if (habits[index].count === 0) {\r\n      const habits_count = this.props.habits_count + 1;\r\n      this.props.onSetHabits_count(habits_count);\r\n    }\r\n    habits[index].count++; // spread 연산자로 복사될 때 객체 (주소) 가 복사되어서 어차피 같은 것을 가르치고 있다.\r\n    // 배열안에 있는 object를 직접 수정했는데 이도 좋지 않다. 뒷 강의에서 설명!\r\n    // this.setState({ habits }); // 자식 컴포넌트는 부모 컴포넌트의 state값을 동일하게 가지는가?? 궁금!\r\n    this.props.onSetHabits(habits);\r\n  };\r\n\r\n  handleDecrement = (habit) => {\r\n    // const id = habit.id;\r\n    // const { habits } = this.state;\r\n    // this.setState({\r\n    //   habits: habits.map((m_habit) =>\r\n    //     id === m_habit.id\r\n    //       ? { ...m_habit, count: m_habit.count > 0 ? m_habit.count - 1 : 0 }\r\n    //       : m_habit\r\n    //   ),\r\n    // });\r\n\r\n    const habits = [...this.props.habits]; // ... spread operator => 하나하나씩 복사해오는 것.\r\n    // spread를 사용한 이유 state를 직접적으로 접근하는 것 대신 껍데기를 하나 만들어줌.\r\n\r\n    const index = habits.indexOf(habit); // indexOf를 주소 값으로 참조하는 것인가?! string일 때는 값을 참조했는데 확인 필요\r\n    const count = habits[index].count - 1;\r\n    if (count === 0) {\r\n      const habits_count = this.props.habits_count - 1;\r\n      this.props.onSetHabits_count(habits_count);\r\n    }\r\n    habits[index].count = count < 0 ? 0 : count; // bad code!!\r\n    // this.setState({ habits }); // this.setState({ habits : habits }) 이지만, key와 value 이름이 같아서 habits 하나로 쓸 수 있다.\r\n    this.props.onSetHabits(habits);\r\n  };\r\n\r\n  handleDelete = (habit) => {\r\n    // const id = habit.id;\r\n    // const { habits } = this.state;\r\n    // this.setState({\r\n    //   habits: habits.filter((m_habit) => id !== m_habit.id),\r\n    // });\r\n    \r\n    const habitCp = [...this.props.habits];\r\n    const index = habitCp.indexOf(habit);\r\n    const count = habitCp[index].count;\r\n    if (count > 0) {\r\n      const habits_count = this.props.habits_count - 1;\r\n      this.props.onSetHabits_count(habits_count);\r\n    }\r\n    const habits = this.props.habits.filter((item) => item.id !== habit.id);\r\n    this.props.onSetHabits(habits);\r\n  };\r\n  render() {\r\n    const { habits } = this.props;\r\n    return (\r\n      <div>\r\n        <ul>\r\n          {habits.map((habit) => (\r\n            <Habit\r\n              key={habit.id}\r\n              habit={habit}\r\n              onIncrement={this.handleIncrement}\r\n              onDecrement={this.handleDecrement}\r\n              onDelete={this.handleDelete}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n} */\r\n","import React, { PureComponent } from 'react';\r\n\r\nclass Navbar extends PureComponent {\r\n  render() {\r\n    return (\r\n      <div className='navbar'>\r\n        <i className='navbar-logo fas fa-leaf'></i>\r\n        <span>Habit Tracker</span>\r\n        <span className='navbar-count'>{this.props.totalCount}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import './app.css';\nimport Habits from './components/Habits';\n\nimport React, { Component } from 'react';\nimport Navbar from './components/navbar';\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n  handleIncrement = (habit) => {\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n\n    /*아래는 PureComponent 2번째 방법 */\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      } else {\n        return item;\n      }\n    });\n    this.setState({ habits });\n  };\n\n  handleDecrement = (habit) => {\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      } else {\n        return item;\n      }\n    });\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = (name) => {\n    const habits = [\n      ...this.state.habits,\n      { id: Date.now(), name, count: 0 },\n      //spread 연산자 앞에만큼 복사하고 뒤에 새로운 데이터를 추가!\n    ];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map((item) => {\n      if (item.count !== 0) {\n        return { ...item, count: 0 }; // 이미 0인거는 reset할 필요없다.\n      }\n      return item;\n    });\n    this.setState({ habits });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          totalCount={this.state.habits.filter((item) => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n\n/* my code \nclass App extends Component {\n  id = 4;\n  state = {\n    habits_count: 0,\n    input_habits: '',\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault(); // page 리로딩 방지\n    const { habits } = this.state;\n    this.setState({\n      habits: habits.concat({\n        id: this.id++,\n        name: this.state.input_habits,\n        count: 0,\n      }),\n    });\n  };\n\n  handleSetHabits_count = (habits_count) => {\n    this.setState({ habits_count });\n  };\n\n  handleSetHabits = (habits) => {\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = [...this.state.habits];\n    habits.map((item) => {\n      item.count = 0;\n    });\n    this.setState({ habits_count: 0, habits });\n  };\n  render() {\n    const { habits_count, habits } = this.state;\n    return (\n      <React.Fragment>\n        <span className='HabitTracker'>\n          <i className='fas fa-leaf leaf_icon'></i>\n          <span>Habit Tracker</span>\n          <span className='habits-count'>{habits_count}</span>\n        </span>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            placeholder='Habit'\n            className='inputHabit'\n            onChange={this.handleChange}\n            name='input_habits'\n            value={this.state.input_habits}\n          />\n          <button type='submit'>Add</button>\n        </form>\n        <Habits\n          habits={habits}\n          habits_count={habits_count}\n          onSetHabits_count={this.handleSetHabits_count}\n          onSetHabits={this.handleSetHabits}\n        />\n        <button className='ResetButton' onClick={this.handleReset}>\n          Reset All\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}